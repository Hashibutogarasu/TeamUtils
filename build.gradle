plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'com.karasu256'

def versionFile = file('version.properties')
def versionProps = new Properties()

// バージョンプロパティとビルド番号の初期化
if (versionFile.exists()) {
    versionFile.withInputStream { versionProps.load(it) }
} else {
    // 初期バージョンを設定
    versionProps.setProperty('major', '0')
    versionProps.setProperty('minor', '0')
    versionProps.setProperty('patch', '1')
    versionFile.createNewFile()
    versionFile.withOutputStream { versionProps.store(it, "Version properties for ${project.name}") }
}

def buildNumberFile = file('build-number.properties')
def buildProps = new Properties()

if (buildNumberFile.exists()) {
    buildNumberFile.withInputStream { buildProps.load(it) }
} else {
    buildProps.setProperty('buildNumber', '0')
    buildNumberFile.createNewFile()
    buildNumberFile.withOutputStream { buildProps.store(it, "Build Number for ${project.name}") }
}

def majorVersion = versionProps.getProperty('major').toInteger()
def minorVersion = versionProps.getProperty('minor').toInteger()
def patchVersion = versionProps.getProperty('patch').toInteger()
def buildNumber = buildProps.getProperty('buildNumber').toInteger()

// バージョン形式
version = "${majorVersion}.${minorVersion}.${patchVersion}.${buildNumber}"

def mcVersion = "1.21.3"

configurations {
    pluginImplementation
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/Karasu-Lab/KarasuCommandAPI"
        credentials {
            username = findProperty('gpr.user') ?: System.getenv("GITHUB_ACTOR")
            password = findProperty('gpr.key') ?: System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/Karasu-Lab/KarasuConfigLib"
        credentials {
            username = findProperty('gpr.user') ?: System.getenv("GITHUB_ACTOR")
            password = findProperty('gpr.key') ?: System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.karasu256:karasu-command-api:0.0.1.61'
    pluginImplementation 'com.karasu256:karasu-command-api:0.0.1.61'
    implementation 'com.karasu256:karasu-config-lib:0.1.0.9'
    pluginImplementation 'com.karasu256:karasu-config-lib:0.1.0.9'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'karasu-team-utils'
            
            version = project.version.toString()
            
            pom {
                name = 'KarasuTeamUtils'
                description = 'A Minecraft plugin that provides team management utilities'
                url = 'https://github.com/Karasu-Lab/KarasuTeamUtils'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'hashibutogarasu'
                        name = 'Hashibutogarasu'
                        email = 'karasu@karasu256.com'
                        url = 'https://github.com/Karasu-Lab'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/Karasu-Lab/KarasuTeamUtils.git'
                    developerConnection = 'scm:git:ssh://github.com/Karasu-Lab/KarasuTeamUtils.git'
                    url = 'https://github.com/Karasu-Lab/KarasuTeamUtils'
                }
            }
        }
    }
    repositories {
        maven {
            name = "Local"
            url = layout.buildDirectory.dir('repos/bundles')
        }
        
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Karasu-Lab/KarasuTeamUtils")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    def signingKey = findProperty("signing.key")
    def signingPassword = findProperty("signing.password")
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        def signingKeyId = findProperty("signing.keyId")
        def signingSecretKeyRingFile = findProperty("signing.secretKeyRingFile")
        
        if (signingKeyId && signingPassword && signingSecretKeyRingFile) {
            def keyFile = new File(signingSecretKeyRingFile.toString().replaceAll('"', ''))
            useInMemoryPgpKeys(signingKeyId, keyFile.text, signingPassword)
        } else {
            println "署名情報が不完全です - 署名はスキップされます"
        }
    }
    
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

tasks.withType(PublishToMavenRepository) {
    mustRunAfter tasks.withType(Sign)
}

// ルートプロジェクトの共通タスクを適用
rootProject.ext.createCommonTasks(project)

tasks {
    runServer {
        minecraftVersion(mcVersion)
        dependsOn('copyDependPlugin')
    }
}

// ビルドタスク設定
tasks.named('build') {
    dependsOn 'sourcesJar', 'javadocJar', 'syncVersionWithGit'
    finalizedBy 'incrementBuildNumber'
}

// processResources タスク設定
tasks.named('processResources') {
    dependsOn 'updatePluginVersion'
}

// plugin.yml更新タスク設定
tasks.named('updatePluginVersion') {
    dependsOn 'syncVersionWithGit'
}