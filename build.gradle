plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'com.karasu256'

def versionFile = file('version.properties')
// versionPropsをプロジェクト拡張プロパティとして定義
project.ext.versionProps = new Properties()

// gitブランチ名とコミットハッシュの取得はルートプロジェクトの同名メソッドを使用

def fetchLatestGitVersion() {
    def latestVersion = [0, 0, 1]
    try {
        def process = "git ls-remote --tags https://github.com/Karasu-Lab/KarasuTeamUtils.git".execute()
        def tags = process.text.readLines()
            .collect { it.split()[1].replaceAll("refs/tags/v", "") }
            .findAll { it =~ /^\d+\.\d+\.\d+$/ }
        
        if (tags) {
            def latest = tags.last()
            latestVersion = latest.tokenize('.').collect { it.toInteger() }
            println "Found latest version tag: v${latest}"
            
            // プロジェクト拡張プロパティを使用
            def currentVersion = [
                project.versionProps.getProperty('major', '0').toInteger(),
                project.versionProps.getProperty('minor', '0').toInteger(),
                project.versionProps.getProperty('patch', '0').toInteger()
            ]
            
            if (latestVersion != currentVersion) {
                println "Version changed from ${currentVersion.join('.')} to ${latestVersion.join('.')}"
                // ビルドナンバーをリセット
                buildProps.setProperty('buildNumber', '0')
                buildProps.store(buildNumberFile.newWriter(), null)
            }
        } else {
            println "No version tags found. Using default version: ${latestVersion.join('.')}"
        }
    } catch (Exception e) {
        println "Warning: Failed to fetch version from Git: ${e.message}"
        println "Using default version: ${latestVersion.join('.')}"
    }
    return latestVersion
}

def initializeWithGitVersion() {
    def gitVersion = fetchLatestGitVersion()
    // プロジェクト拡張プロパティを使用
    project.versionProps.setProperty('major', gitVersion[0].toString())
    project.versionProps.setProperty('minor', gitVersion[1].toString())
    project.versionProps.setProperty('patch', gitVersion[2].toString())
    println "Initialized version from Git: ${gitVersion[0]}.${gitVersion[1]}.${gitVersion[2]}"
    return gitVersion
}

// ビルドナンバーの関連変数を先に定義
def buildNumberFile = file('build-number.properties')
def buildProps = new Properties()

if (versionFile.exists()) {
    versionFile.withInputStream { project.versionProps.load(it) }
} else {
    def gitVersion = initializeWithGitVersion()
    versionFile.createNewFile()
    versionFile.withOutputStream { project.versionProps.store(it, "Version properties for ${project.name}") }
}

if (buildNumberFile.exists()) {
    buildNumberFile.withInputStream { buildProps.load(it) }
} else {
    buildProps.setProperty('buildNumber', '0')
    buildNumberFile.createNewFile()
    buildNumberFile.withOutputStream { buildProps.store(it, null) }
}

def majorVersion = project.versionProps.getProperty('major').toInteger()
def minorVersion = project.versionProps.getProperty('minor').toInteger()
def patchVersion = project.versionProps.getProperty('patch').toInteger()
def buildNumber = buildProps.getProperty('buildNumber').toInteger()

// バージョン形式
version = "${majorVersion}.${minorVersion}.${patchVersion}.${buildNumber}"

def mcVersion = "1.21.3"

configurations {
    pluginImplementation
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/Karasu-Lab/KarasuCommandAPI"
        credentials {
            username = findProperty('gpr.user') ?: System.getenv("GITHUB_ACTOR")
            password = findProperty('gpr.key') ?: System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/Karasu-Lab/KarasuConfigLib"
        credentials {
            username = findProperty('gpr.user') ?: System.getenv("GITHUB_ACTOR")
            password = findProperty('gpr.key') ?: System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.karasu256:karasu-command-api:0.0.1.61'
    pluginImplementation 'com.karasu256:karasu-command-api:0.0.1.61'
    implementation 'com.karasu256:karasu-config-lib:0.1.0.9'
    pluginImplementation 'com.karasu256:karasu-config-lib:0.1.0.9'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'karasu-team-utils'
            
            version = project.version.toString()
            
            pom {
                name = 'KarasuTeamUtils'
                description = 'A Minecraft plugin that provides team management utilities'
                url = 'https://github.com/Karasu-Lab/KarasuTeamUtils'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'hashibutogarasu'
                        name = 'Hashibutogarasu'
                        email = 'karasu@karasu256.com'
                        url = 'https://github.com/Karasu-Lab'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/Karasu-Lab/KarasuTeamUtils.git'
                    developerConnection = 'scm:git:ssh://github.com/Karasu-Lab/KarasuTeamUtils.git'
                    url = 'https://github.com/Karasu-Lab/KarasuTeamUtils'
                }
            }
        }
    }
    repositories {
        maven {
            name = "Local"
            url = layout.buildDirectory.dir('repos/bundles')
        }
        
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Karasu-Lab/KarasuTeamUtils")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    def signingKey = findProperty("signing.key")
    def signingPassword = findProperty("signing.password")
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        def signingKeyId = findProperty("signing.keyId")
        def signingSecretKeyRingFile = findProperty("signing.secretKeyRingFile")
        
        if (signingKeyId && signingPassword && signingSecretKeyRingFile) {
            def keyFile = new File(signingSecretKeyRingFile.toString().replaceAll('"', ''))
            useInMemoryPgpKeys(signingKeyId, keyFile.text, signingPassword)
        } else {
            println "署名情報が不完全です - 署名はスキップされます"
        }
    }
    
    required { gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.mavenJava
}

tasks.withType(PublishToMavenRepository) {
    mustRunAfter tasks.withType(Sign)
}

tasks {
    runServer {
        minecraftVersion(mcVersion)
        dependsOn('copyDependPlugin')
    }
}

tasks.register('syncVersionWithGit') {
    group = 'build'
    description = 'Synchronize version with GitHub release tags'
    
    doLast {
        def gitVersion = fetchLatestGitVersion()
        versionProps.setProperty('major', gitVersion[0].toString())
        versionProps.setProperty('minor', gitVersion[1].toString())
        versionProps.setProperty('patch', gitVersion[2].toString())
        versionFile.withOutputStream { versionProps.store(it, "Version properties for ${project.name}") }
        
        project.version = "${gitVersion[0]}.${gitVersion[1]}.${gitVersion[2]}.${buildNumber}"
        println "Version synchronized with Git: ${project.version}"
    }
}

tasks.register('copyDependPlugin', Copy) {
    doFirst {
        fileTree('run/plugins').matching {
            configurations.pluginImplementation.dependencies.each { dependency ->
                include "**/${dependency.name}-*.jar"
            }
        }.each { file ->
            logger.lifecycle("Removing existing plugin: ${file.name}")
            file.delete()
        }
    }

    dependsOn createPluginsDir
    from(configurations.pluginImplementation)
    into('run/plugins')
}